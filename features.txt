## The Enterprise Document Management System (EDMS) project contains the following core features:




##Core Functions of an EDMS

1. Document Storage: Secure, centralized storage for all organization documents
2. Version Control: Tracking changes and maintaining document history
3. Search & Retrieval: Quick access to documents through metadata and content search
4. Access Control: Role-based permissions for document security
5. Workflow Automation: Routing documents for approval, review, and processing
6. Audit Trails: Recording document access and changes for compliance
7. Integration: Connecting with other business systems like ERP or CRM





1. **User Authentication & Authorization**
    - Secure login and registration system
    - JWT (JSON Web Token) based authentication
    - Role-based access control (admin vs regular users)
    - Password encryption using bcrypt
2. **Document Management**
    - Upload documents with metadata
    - Download documents
    - View document details (name, size, type, upload date)
    - Delete documents (with proper permissions)
    - Automatic file type validation
3. **Document Organization**
    - List all documents with sorting (by date)
    - Search functionality by document name
    - Filter documents by type or other metadata
    - User-specific document views
4. **Security Features**
    - Role-based permissions (admin/user)
    - Document-level access control
    - Document sharing with specific permissions (read/write)
    - Secure file storage
5. **User Experience**
    - Responsive web interface
    - Drag-and-drop file upload
    - Document preview capabilities
    - Upload progress indication
    - Intuitive navigation
6. **API Integration**
    - RESTful API architecture
    - Secure endpoints with JWT verification
    - Complete CRUD operations for documents
    - User profile management
7. **Database Structure**
    - MongoDB integration for document metadata
    - User management system
    - Document permission tracking
    - Audit capabilities for document access
8. **Technical Implementation**
    - React frontend with context API for state management
    - Node.js/Express backend
    - MongoDB database with Mongoose ODM
    - Multer for file upload handling
    - Error handling and validation

The system is designed to be simple yet functional, focusing on essential document management capabilities while maintaining security and usability. It's structured to be deployed in a single day while still providing a solid foundation that can be expanded with additional features later.





The server.js file shows:

Express app initialization
Middleware setup (cors, json parser, file upload)
MongoDB connection
Route registration for users and documents
Basic error handling
Server startup

userModel.js includes:

User schema with name, email, password, role, and createdAt fields
Password encryption using bcrypt (pre-save hook)
JWT token generation method
Password comparison method


documentModel.js includes:

Document schema with name, originalName, path, size, type, owner, permissions, and uploadDate
Text index on the name field for search functionality
Proper references to the User model for ownership and permissions

JWT authentication middleware has been implemented as planned in the flow document.
The auth.js file includes:

The protect middleware that:

Extracts JWT tokens from Authorization headers
Verifies token validity
Fetches the corresponding user and attaches it to the request object


The authorize middleware that:

Controls access based on user roles
Returns appropriate error responses for unauthorized access

API routes have been implemented as planned in the flow document.

userRoutes.js includes:

Registration and login routes (public)
Profile management routes (protected)
Admin route to list all users (protected + role-based)


documentRoutes.js includes:

Document upload route
Route to get all documents the user has access to
Routes to get, update, and delete individual documents
Document sharing functionality





API functionality has been thoroughly implemented as indicated in the flow document.

userController.js includes:

User registration with proper validation
User login with credential verification
Profile retrieval and update functionality
Admin functionality to retrieve all users
JWT token generation for authentication


documentController.js includes:

Document upload with file validation and storage
Document retrieval (all documents the user has access to)
Single document operations (get, update, delete)
Permission handling for document access
Document sharing functionality
Proper file system operations for document storage and deletion